# Executed by all shells
# All code should be sh-compliant
debug_msg "start - rc_common"

###############################################################################
# Basic Shell Setup
###############################################################################
# If not running interactively, don't do anything
[[ "$-" != *i* ]] && return

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"


###############################################################################
# Universal Aliases
###############################################################################
#
# Some example alias instructions
# If these are enabled they will be used instead of any instructions
# they may mask.  For example, alias rm='rm -i' will mask the rm
# application.  To override the alias instruction use a \ before, ie
# \rm will call the real rm not the alias.
#
# Interactive operation...
alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'
#
# Default to human readable figures
alias df='df -h'
alias du='du -h'
alias sizeof='du -h'
#
# Misc :)
# alias less='less -r'                          # raw control characters
# alias whence='type -a'                        # where, of a sort
alias grep='grep --color'                     # show differences in colour
alias egrep='egrep --color=auto'              # show differences in colour
alias fgrep='fgrep --color=auto'              # show differences in colour
#
# Some shortcuts for different directory listings
# alias ls='ls -hF --color=tty'                 # classify files in colour
alias ls='ls -FHG'
# alias dir='ls --color=auto --format=vertical'
# alias vdir='ls --color=auto --format=long'
# alias ll='ls -l'                              # long list
alias la='ls -A'                              # all but . and ..
# alias l='ls -CF'                              #

# silly aliases
alias emacs='echo "Sorry, we use vim here.";'
alias gedit='echo "Sorry, we use vim here.";'


###############################################################################
# PATH modifications
###############################################################################
export PATH=$HOME/bin:$PATH
export PATH=$HOME/dotfiles/bin:$PATH

# Needed for homebrew
export PATH=/opt/homebrew/bin:$PATH
eval "$(brew shellenv)"

# Not needed anymore?
# export PATH=/usr/local/opt/openssl@1.1/bin:$PATH

###############################################################################
# Homebrew modifications
###############################################################################
# Add homebrew to the path
export PATH=/usr/local/sbin:$PATH
export PATH=/usr/local/bin:$PATH
eval "$(/usr/local/bin/brew shellenv)"
eval "$(/opt/homebrew/bin/brew shellenv)"
alias brew-rosetta="/usr/local/bin/brew"

###############################################################################
# Pyenv Setup
###############################################################################
debug_msg "start - pyenv setup"
# Note: We use brew-rosetta below because we want to use the python on rosetta to
# circumvent the current Tensorflow <> M1 incompatibility
if [ -x $(brew-rosetta --prefix)/bin/pyenv ]; then
    PYENV_CMD=$(brew-rosetta --prefix)/bin/pyenv

    # Needed for linux
    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"

    # Get that path in there
    eval "$($PYENV_CMD init -)"

    # Check if we need to add shims to the path
    if [ -z "$(echo $PATH | grep .pyenv/shims)" ]; then
      eval "$($PYENV_CMD init --path)"
    fi

    # Activate pyenv-virtualenv stuff
    # https://github.com/pyenv/pyenv-virtualenv
    eval "$($PYENV_CMD virtualenv-init -)"

    # Add some handy aliases
    alias workon="source activate"
    alias work='source activate ${PWD##*/}'
    alias deactivate="source deactivate"
    alias delenv='deactivate && pyenv virtualenv-delete ${PWD##*/}'

    # Add some convenience functions
    function newvenv() {
        # Use the current dir name as the env name
        export NEW_ENV_NAME=${PWD##*/}

        # If no args were passed, use the global python version.
        # Otherwise use the first arg as the python version.
        if [ -z "$1" ]; then
            eval "$PYENV_CMD virtualenv $NEW_ENV_NAME"
        else
            eval "$PYENV_CMD virtualenv $1 $NEW_ENV_NAME"
        fi

        echo "Run the following command to activate your new venv:"
        echo "    work"
        # check pyenv section of rc_common for nice aliases
        echo "      (or source activate $NEW_ENV_NAME if you don't have 'work' aliased)"
        echo ""
    }
fi

function setpyenvflags() {
    echo "Setting CFLAGS and LDFLAGS env vars for pyenv.  This may take a moment..."
    export CFLAGS="-I$(brew-rosetta --prefix openssl)/include -I$(brew-rosetta --prefix)/include -I$(xcrun --show-sdk-path)/usr/include -Wno-implicit-function-declaration"
    export LDFLAGS="-L$(brew-rosetta --prefix openssl)/lib"
}

# Uncomment the following lines if having issues with installing python versions
# into pyenv but tbh maybe better to just set these env vars before installing
# since they really slow down shell startup :/
# Setup pyenv env vars (otherwise we get weird errors as per https://github.com/pyenv/pyenv/wiki/common-build-problems#build-failed-error-the-python-zlib-extension-was-not-compiled-missing-the-zlib)
#export CFLAGS="-I$(brew --prefix openssl)/include -I$(xcrun --show-sdk-path)/usr/include -Wno-implicit-function-declaration"
#export LDFLAGS="-L$(brew --prefix openssl)/lib"

# Blech -- export this until tensorflow is ARM compatible
export HDF5_DIR="$(brew-rosetta --prefix hdf5)"

debug_msg "end - pyenv setup"

###############################################################################
# External (to this file) Configs
###############################################################################
if [ -f ${HOME}/.bash_aliases ]; then
    source ${HOME}/.bash_aliases
fi

if [ -f ${HOME}/.bash_custom ]; then
    debug_msg "start - bash_custom"
    . ${HOME}/.bash_custom
    debug_msg "end - bash_custom"
fi


###############################################################################
# History
###############################################################################
# Make our history really big.  Don't forget things basically.
export HISTSIZE=1000000
export HISTFILESIZE=100000
export SAVEHIST=$HISTSIZE

# Ignore some controlling instructions
# HISTIGNORE is a colon-delimited list of patterns which should be excluded.
# The '&' is a special pattern which suppresses duplicate entries.
# export HISTIGNORE=$'[ \t]*:&:[fb]g:exit'
# export HISTIGNORE=$'[ \t]*:&:[fb]g:exit:ls' # Ignore the ls command as well


###############################################################################
# Convenience Functions
###############################################################################
# mkdir and cd combined into one command
mkgo() {
  mkdir $1 && cd $1
}

# Check if an array contains an item
# usage: array_contains ("a" "b" "c") "c"
array_contains () {
    local array="$1[@]"
    local seeking=$2
    local in=1
    for element in "${!array}"; do
        if [[ $element == $seeking ]]; then
            in=0
            break
        fi
    done
    return $in
}

# Usage: compresspdf [input file] [output file] [screen*|ebook|printer|prepress]
# Note: If this doesn't work, `brew install ghostscript`
compresspdf() {
    gs -sDEVICE=pdfwrite -dNOPAUSE -dQUIET -dBATCH -dPDFSETTINGS=/${3:-"screen"} -dCompatibilityLevel=1.4 -sOutputFile="$2" "$1"
}

# Just get a string with the current directory name (not full path)
currdir() {
    echo ${PWD##*/}
}

###############################################################################
# Generic Programming Configs
###############################################################################
# Node version mananger
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion


# Run .pythonrc on python shell start
export PYTHONSTARTUP=${HOME}/.pythonrc

# Virtualenv wrapper exports
export WORKON_HOME=$HOME/.virtualenvs

# Activate autojump
# Disabled to speed up shell startup
debug_msg "start - autojump"
[ -f /usr/local/etc/profile.d/autojump.sh ] && . /usr/local/etc/profile.d/autojump.sh
debug_msg "end - autojump"

# TODO: Replace this with direnv in the future?
# Activate autoenv
# if [ -f /usr/local/bin/activate.sh ]; then
#     source `which activate.sh`
#     cd .
# fi

###############################################################################
# GCloud SDK
###############################################################################
debug_msg "start - gcloud"
GCLOUD_INSTALLATION="$HOME/google-cloud-sdk"
if [ "$SHELL" == "/bin/bash" ]; then
  if [ -f "$GCLOUD_INSTALLATION/path.bash.inc" ]; then . "$GCLOUD_INSTALLATION/path.bash.inc"; fi
  if [ -f "$GCLOUD_INSTALLATION/completion.bash.inc" ]; then . "$GCLOUD_INSTALLATION/completion.bash.inc"; fi
elif [ "$SHELL" == "/bin/zsh" ]; then
  if [ -f "$GCLOUD_INSTALLATION/path.zsh.inc" ]; then . "$GCLOUD_INSTALLATION/path.zsh.inc"; fi
  if [ -f "$GCLOUD_INSTALLATION/completion.zsh.inc" ]; then . "$GCLOUD_INSTALLATION/completion.zsh.inc"; fi
fi

# Set the gcloud command python
export CLOUDSDK_PYTHON=$(which python3)

debug_msg "end - gcloud"

#######
# End rc_common
#######
debug_msg "end - rc_common"
