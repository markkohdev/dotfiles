#!/usr/bin/bash
# To the extent possible under law, the author(s) have dedicated all
# copyright and related and neighboring rights to this software to the
# public domain worldwide. This software is distributed without any warranty.
# You should have received a copy of the CC0 Public Domain Dedication along
# with this software.
# If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.

# base-files version 4.1-1

# ~/.bashrc: executed by bash(1) for interactive shells.

# The latest version as installed by the Cygwin Setup program can
# always be found at /etc/defaults/etc/skel/.bashrc

# Modifying /etc/skel/.bashrc directly will prevent
# setup from updating it.

# The copy in your home directory (~/.bashrc) is yours, please
# feel free to customise it to create a shell
# environment to your liking.  If you feel a change
# would be benifitial to all, please feel free to send
# a patch to the cygwin mailing list.

# User dependent .bashrc file

# If not running interactively, don't do anything
[[ "$-" != *i* ]] && return

# Shell Options
#
# See man bash for more options...
#
# Don't wait for job termination notification
# set -o notify
#
# Don't use ^D to exit
# set -o ignoreeof
#
# Use case-insensitive filename globbing
# shopt -s nocaseglob
#

#
# When changing directory small typos can be ignored by bash
# for example, cd /vr/lgo/apaache would find /var/log/apache
# shopt -s cdspell

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"


# Completion options
#
# These completion tuning parameters change the default behavior of bash_completion:
#
# Define to access remotely checked-out files over passwordless ssh for CVS
# COMP_CVS_REMOTE=1
#
# Define to avoid stripping description in --option=description of './configure --help'
# COMP_CONFIGURE_HINTS=1
#
# Define to avoid flattening internal contents of tar files
# COMP_TAR_INTERNAL_PATHS=1
#
# Uncomment to turn on programmable completion enhancements.
# Any completions you add in ~/.bash_completion are sourced last.
# [[ -f /etc/bash_completion ]] && . /etc/bash_completion

#### History Options #####
# Make our history really big.  Don't forget things basically.
export HISTSIZE=100000
export HISTFILESIZE=100000

# Don't put duplicate lines in the history.
export HISTCONTROL=$HISTCONTROL${HISTCONTROL+,}ignoredups:erasedups

# Make bash append rather than overwrite the history on disk
shopt -s histappend

# After each command, append to the history file and reread it
# (Basically "share history between tabs, windows, etc")
export PROMPT_COMMAND=${PROMPT_COMMAND:+"$PROMPT_COMMAND; "}"history -a; history -c; history -r"

# Ignore some controlling instructions
# HISTIGNORE is a colon-delimited list of patterns which should be excluded.
# The '&' is a special pattern which suppresses duplicate entries.
# export HISTIGNORE=$'[ \t]*:&:[fb]g:exit'
# export HISTIGNORE=$'[ \t]*:&:[fb]g:exit:ls' # Ignore the ls command as well


# Aliases
#
# Some example alias instructions
# If these are enabled they will be used instead of any instructions
# they may mask.  For example, alias rm='rm -i' will mask the rm
# application.  To override the alias instruction use a \ before, ie
# \rm will call the real rm not the alias.
#
# Interactive operation...
alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'
#
# Default to human readable figures
alias df='df -h'
alias du='du -h'
alias sizeof='du -h'
#
# Misc :)
# alias less='less -r'                          # raw control characters
# alias whence='type -a'                        # where, of a sort
alias grep='grep --color'                     # show differences in colour
alias egrep='egrep --color=auto'              # show differences in colour
alias fgrep='fgrep --color=auto'              # show differences in colour
#
# Some shortcuts for different directory listings
# alias ls='ls -hF --color=tty'                 # classify files in colour
alias ls='ls -FHG'
# alias dir='ls --color=auto --format=vertical'
# alias vdir='ls --color=auto --format=long'
# alias ll='ls -l'                              # long list
alias la='ls -A'                              # all but . and ..
# alias l='ls -CF'                              #

# Some more handy custom shortcuts
mkgo() { # mkdir and cd combined into one command
  mkdir $1 && cd $1
}

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ${HOME}/.bash_aliases ]; then
    source ${HOME}/.bash_aliases
fi


if [ -f ${HOME}/.bash_custom ]; then
    . ${HOME}/.bash_custom
fi

if [ -f ${HOME}/.bash_additions ]; then
    . ${HOME}/.bash_additions
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# Assume we're on linux unless we have brew installed (below)
LINUX=true

# Also enable mac bash completion for git because it sucks by default
if [ ! -z $(which brew) ]; then
    # We're on mac!
    LINUX=false

    if [ -f $(brew --prefix)/etc/bash_completion ]; then
       . $(brew --prefix)/etc/bash_completion
    fi
fi

# Add things to PATH
export PATH=$PATH:$HOME/bin
export PATH=$PATH:$HOME/dotfiles/bin
export PATH=/Library/Frameworks/Python.framework/Versions/2.7/bin/python:$PATH

array_contains () { 
    local array="$1[@]"
    local seeking=$2
    local in=1
    for element in "${!array}"; do
        if [[ $element == $seeking ]]; then
            in=0
            break
        fi
    done
    return $in
}

# Some PS1 Colors
COLOR_RED="\033[0;31m"
COLOR_YELLOW="\033[0;33m"
COLOR_GREEN="\033[0;32m"
COLOR_OCHRE="\033[38;5;95m"
COLOR_BLUE="\033[0;34m"
COLOR_WHITE="\033[0;37m"
COLOR_RESET="\033[0m"

DONT_GIT_COLOR=("/Users/markkoh/spotify/android_client")

# Get the appropriate color for the git branch
function git_color {
	# Don't run this for large git repos (specified in the array above)
	if array_contains DONT_GIT_COLOR $(pwd); then
		echo -e $COLOR_OCHRE
	else   
		local git_status="$(git status --ignore-submodules 2> /dev/null)"
		# Unclean tree says "directory" on unix but "tree" on mac
		[[ $LINUX ]] && local tree_jawn="directory" || local tree_jawn="tree"

		if [[ ! "$git_status" =~ "working $tree_jawn clean" ]]; then
			echo -e $COLOR_RED
		elif [[ "$git_status" =~ "Your branch is ahead of" ]]; then
			echo -e $COLOR_YELLOW
		elif [[ "$git_status" =~ "nothing to commit" ]]; then
			echo -e $COLOR_GREEN
		else
			echo -e $COLOR_OCHRE
		fi
	fi
}

function parse_git_branch {
    git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}

# Usage: compresspdf [input file] [output file] [screen*|ebook|printer|prepress]
# Note: If this doesn't work, `brew install ghostscript`
compresspdf() {
	gs -sDEVICE=pdfwrite -dNOPAUSE -dQUIET -dBATCH -dPDFSETTINGS=/${3:-"screen"} -dCompatibilityLevel=1.4 -sOutputFile="$2" "$1"
}

###########

# Custom prompt settings
PS1="["  # Open square bracket
PS1+="\e[1;32m"  # GREEN
PS1+="\u@\h-$SYSTEM_ENV "  # user@hostname
PS1+="\e[m"  # WHITE
PS1+="\t "  # Time (padded)
PS1+="\e[1;33m"  # Yellow
PS1+="\w "  # Working dir (padded)
PS1+="\$(git_color)"  # Blue
PS1+="\$(parse_git_branch)"  # git branch (evaluated at expansion)
PS1+="\e[m"  # WHITE
PS1+="]\n $ "  # Close brachet, newline, prompt
export PS1

# Change the window title of X terminals
case ${TERM} in
        xterm*|rxvt*|Eterm|aterm|kterm|gnome)
                PROMPT_COMMAND=${PROMPT_COMMAND:+"$PROMPT_COMMAND; "}'echo -ne "\033]0;${USER}@${HOSTNAME%%.*}:${PWD/$HOME/~}\007"'
                ;;
        screen)
                PROMPT_COMMAND=${PROMPT_COMMAND:+"$PROMPT_COMMAND; "}'echo -ne "\033_${USER}@${HOSTNAME%%.*}:${PWD/$HOME/~}\033\\"'
                ;;
esac

# Run .pythonrc on python shell start
export PYTHONSTARTUP=${HOME}/.pythonrc

# silly aliases
alias emacs='echo "Sorry, we use vim here.";'
alias gedit='echo "Sorry, we use vim here.";'

export NVM_DIR="/Users/markkoh/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm


# Virtualenv wrapper exports
export WORKON_HOME=$HOME/.virtualenvs
source `which virtualenvwrapper.sh`

if [ -x /usr/local/bin/pyenv ]; then
    eval "$(pyenv init -)"
fi

    
# Activate autoenv
if [ -f /usr/local/bin/activate.sh ]; then
    source `which activate.sh`
    cd .
fi

[ -f ~/.fzf.bash ] && source ~/.fzf.bash

